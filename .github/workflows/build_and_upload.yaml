name: Build&Upload

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set Python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: '3.11'
      - name: Install dependencies 
        run: |
           uv sync --locked --group build
      - name: Build sdist
        run: |
          uv run python -m build --sdist --outdir ./dist
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-sdist
          path: dist/*.tar.gz
          retention-days: 30
          compression-level: 0
          
  build_wheels_linux_x86_64:
    name: Build wheels linux x86_64
    runs-on: ubuntu-latest
    container: ${{matrix.container}}
    strategy:
      fail-fast: false 
      matrix:  
        include:
         - artifact: wheel-linux_x86_64_python39
           python: /opt/python/cp39-cp39/bin/python
           container: ghcr.io/openjij/openjij-builder-minimum-manylinux_2_28_x86_64:latest
         - artifact: wheel-linux_x86_64_python310
           python: /opt/python/cp310-cp310/bin/python
           container: ghcr.io/openjij/openjij-builder-minimum-manylinux_2_28_x86_64:latest
         - artifact: wheel-linux_x86_64_python311
           python: /opt/python/cp311-cp311/bin/python
           container: ghcr.io/openjij/openjij-builder-minimum-manylinux_2_28_x86_64:latest
         - artifact: wheel-linux_x86_64_python312
           python: /opt/python/cp312-cp312/bin/python
           container: ghcr.io/openjij/openjij-builder-minimum-manylinux_2_28_x86_64:latest
         - artifact: wheel-linux_x86_64_python313
           python: /opt/python/cp313-cp313/bin/python
           container: ghcr.io/openjij/openjij-builder-minimum-manylinux_2_28_x86_64:latest
               
    steps:
      - uses: actions/checkout@v4       
      - name: Get Python Version
        shell: bash
        run: |
          set -eux
          ls /opt/python
          ${{matrix.python}} --version > python_version.txt
          cat python_version.txt
      - name: Install Dependencies
        shell: bash
        run: |
          set -eux
          ${{matrix.python}} -m pip install --upgrade pip
          ${{matrix.python}} -m pip install --upgrade build auditwheel
      - name: Build 
        run: |
          set -x
          echo "::group::Set Intel oneAPI"
          mkdir -p /tmp/tmp
          touch /tmp/tmp/config.txt
          echo "" >> /tmp/tmp/config.txt
          source /opt/intel/oneapi/compiler/latest/env/vars.sh 
          source /opt/intel/oneapi/mkl/latest/env/vars.sh
          source /opt/intel/oneapi/setvars.sh --force  --config="/tmp/tmp/config.txt"
          du -a /opt/intel/oneapi/compiler/latest/linux/bin
          echo "::endgroup::"
          echo "::group::BUILD"
          export CIBUILDWHEEL=1
          export CC=icx
          export CXX=icpx
          export FC=ifx
          export CFLAGS='-march=x86-64-v3 -mtune=generic' 
          export CXXFLAGS='-march=x86-64-v3 -mtune=generic' 
          export FFLAGS='-march=x86-64-v3 -mtune=generic'
          ${{matrix.python}} -m build --wheel --outdir ./dist
          echo "::endgroup::"
          #. /opt/intel/oneapi/setvars.sh --force  --config="config.txt"
          # export FC=ifx
      - name: Show Files 
        id: wheel
        shell: bash
        run: |
          set -x 
          source /opt/intel/oneapi/setvars.sh --force  --config="/tmp/tmp/config.txt"
          du -ah ./dist
          cd dist
          for f in *.whl; do ${{matrix.python}} -m auditwheel show $f; done 
          for f in *.whl; do ${{matrix.python}} -m auditwheel repair -w ../wheelhouse $f; done    
          cd ../wheelhouse
          du -ah ./
      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.artifact}}
          path: ./wheelhouse/*.whl
          retention-days: 30   
          compression-level: 0

  build_wheels_linux_aarch64:
    name: Build wheels linux aarch64 ${{matrix.CIBW_BUILD}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:  
        include:
          - artifact: wheel-linux_aarch64_python39
            os: ubuntu-latest
            arch: aarch64
            CIBW_BUILD: cp39-manylinux_aarch64
          - artifact: wheel-linux_aarch64_python310
            os: ubuntu-latest
            arch: aarch64
            CIBW_BUILD: cp310-manylinux_aarch64
          - artifact: wheel-linux_aarch64_python311
            os: ubuntu-latest
            arch: aarch64
            CIBW_BUILD: cp311-manylinux_aarch64
          - artifact: wheel-linux_aarch64_python312
            os: ubuntu-latest
            arch: aarch64
            CIBW_BUILD: cp312-manylinux_aarch64
          - artifact: wheel-linux_aarch64_python313
            os: ubuntu-latest
            arch: aarch64
            CIBW_BUILD: cp313-manylinux_aarch64
    steps:
      - uses: actions/checkout@v4       
      - name: Set up QEME
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
            install: true
      - name: Build wheels on ${{matrix.arch}}
        uses: pypa/cibuildwheel@v3.1.1
        env:
          CIBW_BUILD: ${{matrix.CIBW_BUILD}}
          CIBW_ENVIRONMENT: ""
          CIBW_PLATFORM:  linux
          CIBW_ARCHS: ${{matrix.arch}}
          CIBW_BEFORE_ALL_LINUX: >
               dnf config-manager --set-enabled powertools &&
               dnf makecache --refresh &&
               dnf -y --enablerepo=powertools install openblas-static &&
               dnf -y --enablerepo=powertools install lapack-static &&
               dnf -y install gcc-toolset-11 &&
               dnf -y --enablerepo=powertools install eigen3-devel
          CIBW_BEFORE_BUILD_LINUX: >
               source scl_source enable gcc-toolset-11 &&
               pip install pybind11 cmake ninja
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.9"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.artifact}}
          path: ./wheelhouse/*.whl
          retention-days: 30 
          compression-level: 0
          
  build_wheels_macos:
    name: Build wheels macos ${{ matrix.arch }} 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:  
        include:
          - artifact: wheel-macosx-13
            os: macos-latest
            arch: universal2
            CIBW_PLATFORM: macos  
            CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET='13.0'"
          - artifact: wheel-macos-10
            os: macos-latest
            arch: universal2
            CIBW_PLATFORM: macos
            CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET='10.14'"
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependency 
        shell: bash 
        run: |
          set -eux 
          brew install eigen nlohmann-json
      - name: Build wheels on ${{ matrix.CIBW_PLATFORM }} ${{matrix.arch}}
        uses: pypa/cibuildwheel@v3.1.1
        env:
          CIBW_ENVIRONMENT: ${{ matrix.CIBW_ENVIRONMENT }}
          CIBW_PLATFORM:  ${{ matrix.CIBW_PLATFORM }}
          CIBW_ARCHS: ${{matrix.arch}}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.9"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{matrix.artifact}}
          path: ./wheelhouse/*.whl
          retention-days: 30 
          compression-level: 0
          
  build_wheels_windows:
    name: Build wheels windows ${{ matrix.arch }} 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:  
        include:
          - os: windows-latest
            arch: AMD64
            CIBW_PLATFORM: windows 
            CIBW_ENVIRONMENT: "CMAKE_TOOLCHAIN_FILE='C:/vcpkg/scripts/buildsystems/vcpkg.cmake'"
    steps:
      - uses: actions/checkout@v4       
      - name: Add msbuild to PATH
        if: ${{ matrix.os == 'windows-latest'}}
        uses: microsoft/setup-msbuild@v2.0.0
      - name: Prepare Cache 
        if: ${{ matrix.os == 'windows-latest'}}
        shell: bash 
        run: |
          set -eux
          ls  C:/vcpkg
          MSBuild.exe -version > msbuild_version.txt
          cat msbuild_version.txt
      - name: Cache vcpkg
        uses: actions/cache@v4
        if: ${{ matrix.os == 'windows-latest'}}
        with:
           path: |
             C:/Users/runneradmin/AppData/Local/vcpkg/archives
           key: ${{ matrix.os }}-vcpkg-${{ hashFiles('msbuild_version.txt') }}
           restore-keys: |
             ${{ matrix.os }}-vcpkg-${{ hashFiles('msbuild_version.txt') }}
             ${{ matrix.os }}-vcpkg
      - name: Install Dependency 
        shell: bash 
        run: |
          set -eux 
          vcpkg update
          vcpkg --triplet x64-windows-static install eigen3
          vcpkg --triplet x64-windows install eigen3
          vcpkg --triplet x64-windows-static install nlohmann-json
          vcpkg --triplet x64-windows install nlohmann-json
          vcpkg integrate install
      - name: Build wheels on ${{ matrix.CIBW_PLATFORM }} ${{matrix.arch}}
        uses: pypa/cibuildwheel@v3.1.1
        env:
          CIBW_ENVIRONMENT: ${{ matrix.CIBW_ENVIRONMENT }}
          CIBW_PLATFORM:  ${{ matrix.CIBW_PLATFORM }}
          CIBW_ARCHS: ${{matrix.arch}}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.9"
          
      - uses: actions/upload-artifact@v4
        with:
          name: wheel-windows
          path: ./wheelhouse/*.whl
          retention-days: 30         
          compression-level: 0

          
  upload_pypi:
    needs: [build_wheels_linux_x86_64, build_wheels_linux_aarch64, build_wheels_macos, build_wheels_windows, build_sdist]
    runs-on: ubuntu-latest
    permissions:
        id-token: write
    if: ${{github.event_name == 'release'}}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
          pattern: wheel-*
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./dist
          verify-metadata: true
          skip-existing: false
          verbose: true
